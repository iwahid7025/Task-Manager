/**
 * API Service Layer for Task Management Application
 * 
 * This module provides a centralized interface for communicating with the backend API.
 * It handles HTTP requests, response parsing, error handling, and type safety for all
 * task-related operations. All API calls are asynchronous and return Promises.
 */

/**
 * Enumeration representing the different states a task can be in.
 * Values match the backend Status enum for consistency.
 */
export enum Status {
  /** Task is planned but not yet started */
  Todo = 0,
  /** Task is currently being worked on */
  InProgress = 1,
  /** Task has been completed */
  Done = 2,
}

/**
 * Interface representing a complete task item as returned by the API.
 * Contains all properties including the auto-generated ID from the database.
 */
export interface TaskItem {
  /** Unique identifier generated by the database */
  id: number;
  /** Required title of the task (max 200 characters) */
  title: string;
  /** Optional description providing additional details */
  description?: string | null;
  /** Current status of the task */
  status: Status;
}

/**
 * Data Transfer Object for creating new tasks.
 * Excludes the ID field since it's auto-generated by the database.
 */
export interface TaskCreateDto {
  /** Title of the new task */
  title: string;
  /** Optional description for the new task */
  description?: string | null;
  /** Initial status (typically Todo) */
  status: Status;
}

/**
 * Data Transfer Object for updating existing tasks.
 * Currently identical to TaskCreateDto but kept separate for future extensibility.
 */
export interface TaskUpdateDto extends TaskCreateDto {}

/**
 * Base URL for the API endpoints, loaded from environment variables.
 * This allows for different API URLs in development vs production.
 */
const BASE_URL = import.meta.env.VITE_API_BASE_URL as string;

/**
 * Generic response handler for API calls.
 * Checks response status and converts successful responses to JSON.
 * Throws descriptive errors for failed requests.
 * 
 * @template T - The expected type of the response data
 * @param res - The fetch Response object to process
 * @returns Promise resolving to the parsed response data
 * @throws Error with status code and message if the request failed
 */
const handle = async <T>(res: Response): Promise<T> => {
  if (!res.ok) {
    // Extract error message from response body for better debugging
    const text = await res.text();
    throw new Error(`${res.status} ${res.statusText}: ${text}`);
  }
  return (await res.json()) as T;
};

/**
 * Retrieves all tasks from the API.
 * 
 * @returns Promise resolving to an array of all TaskItem objects
 * @throws Error if the API request fails
 */
export const getTasks = async (): Promise<TaskItem[]> => {
  const res = await fetch(`${BASE_URL}/api/tasks`);
  return handle<TaskItem[]>(res);
};

/**
 * Retrieves a specific task by its ID.
 * 
 * @param id - The unique identifier of the task to retrieve
 * @returns Promise resolving to the TaskItem object
 * @throws Error if the task is not found or the API request fails
 */
export const getTask = async (id: number): Promise<TaskItem> => {
  const res = await fetch(`${BASE_URL}/api/tasks/${id}`);
  return handle<TaskItem>(res);
};

/**
 * Creates a new task via the API.
 * 
 * @param dto - The task creation data
 * @returns Promise resolving to the created TaskItem (including assigned ID)
 * @throws Error if validation fails or the API request fails
 */
export const createTask = async (dto: TaskCreateDto): Promise<TaskItem> => {
  const res = await fetch(`${BASE_URL}/api/tasks`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(dto),
  });
  return handle<TaskItem>(res);
};

/**
 * Updates an existing task with new data.
 * 
 * @param id - The unique identifier of the task to update
 * @param dto - The updated task data
 * @returns Promise that resolves when the update is complete
 * @throws Error if the task is not found, validation fails, or the API request fails
 */
export const updateTask = async (id: number, dto: TaskUpdateDto): Promise<void> => {
  const res = await fetch(`${BASE_URL}/api/tasks/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(dto),
  });
  // For PUT requests, we don't expect JSON response, just check status
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
};

/**
 * Deletes a task from the system.
 * 
 * @param id - The unique identifier of the task to delete
 * @returns Promise that resolves when the deletion is complete
 * @throws Error if the task is not found or the API request fails
 */
export const deleteTask = async (id: number): Promise<void> => {
  const res = await fetch(`${BASE_URL}/api/tasks/${id}`, { method: "DELETE" });
  // For DELETE requests, we don't expect JSON response, just check status
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
};